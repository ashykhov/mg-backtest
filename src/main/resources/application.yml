server.port: ${MG_SERVER_PORT}

eureka.client.enabled: false
eureka.client.fetch-registry: false

# Swagger
springdoc.api-docs.path: /v3/api-docs
springdoc.swagger-ui:
  path: /swagger-ui.html
  enabled: ${MG_SWAGGER_ENABLED:false}

# Server config
server:
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: never

spring:
  application.name: ${MG_APP_NAME:backtest}
  webflux:
    base-path: "/${spring.application.name}"
    problemdetails:
      enabled: true
  datasource:
    url: 'jdbc:postgresql://${SPRING_DATABASE_URL}'
    password: ${SPRING_DATABASE_PASSWORD}
    username: ${SPRING_DATABASE_USERNAME}
    hikari:
      data-source-properties:
        reWriteBatchedInserts: true  # Оптимизация специфичная для PostgreSQL
      maximum-pool-size: 50        # Максимум соединений в пуле
      minimum-idle: 10              # Минимальное количество простаивающих соединений
      connection-timeout: 30000    # Максимальное время ожидания соединения (30 секунд)
      idle-timeout: 60000         # Время жизни неиспользуемого соединения (10 минут)
  jpa:
    properties:
      hibernate:
        #        dialect: org.hibernate.dialect.PostgreSQLDialect
        order_inserts: true  # Сортировать вставки для улучшения батчинга
        order_updates: true  # Сортировать обновления для улучшения батчинга
#        generate_statistics: true  # Опционально: мониторинг эффективности батчинга
        jdbc:
          time_zone: UTC
          lob.non_contextual_creation: "true"
          batch_size: 500  # Количество операций в одном батче
          batch_versioned_data: true  # Включать версионные сущности в батчи

        archive.autodetection: class, hbm
        id.db_structure_naming_strategy: legacy
    hibernate:
      ddl-auto: update
  # Flyway для миграций
  flyway:
    enabled: true
    baseline-on-migrate: true

  rsocket:
    server:
      mapping-path: /${spring.application.name}/rsocket
      transport: websocket
  codec:
    max-in-memory-size: 1MB

api:
  url:
    candle: ${MG_API_URL_CANDLE}

management:
  endpoints.web.exposure.include: "*"
  prometheus.metrics.export.enabled: true
  metrics:
    tags:
      application: ${spring.application.name}